//gecebs9-network description

namespace org.gec.ebs

event SampleEvent {
  //--> SampleAsset asset
  o String oldValue
  o String newValue
}

enum WellProductType {
  o OIL
  o GAS
}

enum WellProdTimeType {
  o PT
  o NPT
  o UNK
}

/* The status of a shipment */
/*
enum ShipmentStatus {
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}
*/
/* An abstract transaction that is related to a Shipment */
//abstract transaction ShipmentTransaction {
//  --> Shipment shipment
//}

/**
 * An temperature reading for a shipment. E.g. received from a
 * device within a temperature controlled shipping container
 */
//fyi: used in Well too
/*
transaction	TemperatureReading {
  o Double		centigrade
  //o DateTime	sensorReading
  //--> Shipment	shipment
}
*/
transaction	SensorReading {
  o WellProdTimeType  fieldtimePTorNPTFlagYesNo
  o DateTime		      fieldTimeStamp		optional
  o Double			      fieldcentigrade		optional
  --> WellShipment    wellshipment
}

/**
 * A notification that a shipment has been received by the
 * importer and that funds should be transferred from the importer
 * to the grower to pay for the shipment.
 */
/*
transaction ShipmentReceived {
  --> Shipment shipment
}
*/
/* A shipment being tracked as an asset on the ledger */
/*
asset Shipment identified by shipmentId {
  o String shipmentId
  o ProductType		type		optional	//LT added word
  o ShipmentStatus	status		optional	//LT added word
  o Long			unitCount	optional	//LT added word
  o TemperatureReading[]		temperatureReadings	optional
  --> Contract contract
}
*/
asset WellShipment identified by shipmentId {
  o String					shipmentId
  o WellOwner				owner				optional
  --> WellContract			wellcontract		optional
  o WellProductType			type				optional
  //o TemperatureReading[]	temperatureReadings	optional
  o SensorReading[]			sensorReadings		optional
}
/*
asset Contract identified by contractId {
  o String contractId
  //--> Grower grower
  //--> Shipper shipper
  //--> Importer importer
  
  o DateTime arrivalDateTime
  o Double unitPrice
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}
*/

asset WellContract identified by contractId {
  o String			contractId
  o	Boolean			activestatus	optional	//active or not 
  --> WellOwner		owner		optional
  --> WellOperator	operator	optional
  //startDate
  //endDate
  //wells[]
}

/* A concept for a simple street address */
concept Address {
  o String	city			optional
  o String	country
  o String	street			optional
  o String	postalcode		optional
}

/* An abstract participant type in this business network */
abstract participant Business identified by email {
  o String	email
  o Address	address
//  o Double  accountBalance
}

participant	WellOwner		extends	Business {
}

participant	WellOperator	extends	Business {
}

/* JUST FOR INITIALIZING A DEMO */
transaction SetupDemo {
}
